{
	"name": "OEA_connector",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark4v3p1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 4,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "4",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "5d6acf17-ad1a-4ebb-b6c7-50bd4741e521"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7b9a4896-4541-483f-bdc7-d8f4ec6be3ee/resourceGroups/rg-oea-CISD3GG1/providers/Microsoft.Synapse/workspaces/syn-oea-cisd3gg1/bigDataPools/spark4v3p1",
				"name": "spark4v3p1",
				"type": "Spark",
				"endpoint": "https://syn-oea-cisd3gg1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark4v3p1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# OEA connector\n",
					"This notebook provides a way for invoking methods on the OEA framework or supporting modules from a pipeline.\n",
					"\n",
					"When setting up a new module, be sure to include a new cell below that imports that module, so that its methods can be invoked by pipelines."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# These values should be passed in from the pipeline that is using this notebook as an activity.\r\n",
					"# Note that kwargs allows you to pass in a dict of params, including params that need to be eval'd prior to use (eg, kwargs={'path':'eval(oea.stage2np)'})\r\n",
					"object_name = 'oea'\r\n",
					"method_name = 'print_stage'\r\n",
					"kwargs = {'path':'eval(oea.stage2np)'}"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"%run /OEA_py"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"%run /ContosoSIS_py"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"resolved_params = {}\r\n",
					"for key in kwargs:\r\n",
					"    if kwargs[key].startswith('eval('):\r\n",
					"        m = re.match(r\"eval\\((.*)\\)\", kwargs[key])\r\n",
					"        print(m.group(1))\r\n",
					"        resolved_params[key] = eval(m.group(1))\r\n",
					"    else:\r\n",
					"        resolved_params[key] = kwargs[key]\r\n",
					"\r\n",
					"m = getattr(eval(object_name), method_name)\r\n",
					"m(**resolved_params)"
				],
				"execution_count": null
			}
		]
	}
}